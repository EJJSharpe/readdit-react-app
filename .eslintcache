[{"/Users/elliotsharpe/Projects/readdit-react-app/src/App.js":"1","/Users/elliotsharpe/Projects/readdit-react-app/src/index.js":"2","/Users/elliotsharpe/Projects/readdit-react-app/src/components/Navbar.jsx":"3","/Users/elliotsharpe/Projects/readdit-react-app/src/components/ArticlesList.jsx":"4","/Users/elliotsharpe/Projects/readdit-react-app/src/api.js":"5","/Users/elliotsharpe/Projects/readdit-react-app/src/components/TopVotedList.jsx":"6","/Users/elliotsharpe/Projects/readdit-react-app/src/components/TopicButtons.jsx":"7","/Users/elliotsharpe/Projects/readdit-react-app/src/components/SingleArticle.jsx":"8","/Users/elliotsharpe/Projects/readdit-react-app/src/components/AddComment.jsx":"9","/Users/elliotsharpe/Projects/readdit-react-app/src/components/CommentsSection.jsx":"10","/Users/elliotsharpe/Projects/readdit-react-app/src/components/Voter.jsx":"11"},{"size":1132,"mtime":1611158537556,"results":"12","hashOfConfig":"13"},{"size":152,"mtime":1609614889011,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1611144607685,"results":"15","hashOfConfig":"13"},{"size":1608,"mtime":1611148743677,"results":"16","hashOfConfig":"13"},{"size":1681,"mtime":1611148912589,"results":"17","hashOfConfig":"13"},{"size":1144,"mtime":1611164441286,"results":"18","hashOfConfig":"13"},{"size":1198,"mtime":1611157908081,"results":"19","hashOfConfig":"13"},{"size":1267,"mtime":1611162154050,"results":"20","hashOfConfig":"13"},{"size":1066,"mtime":1611145938048,"results":"21","hashOfConfig":"13"},{"size":1797,"mtime":1611165172564,"results":"22","hashOfConfig":"13"},{"size":1309,"mtime":1611161104341,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},"17ciqti",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"27"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/elliotsharpe/Projects/readdit-react-app/src/App.js",["49"],"import React, { useState } from 'react'\nimport Navbar from './components/Navbar'\nimport ArticlesList from './components/ArticlesList'\nimport './styles/index.scss'\nimport TopVotedList from './components/TopVotedList'\nimport TopicButtons from './components/TopicButtons'\nimport SingleArticle from './components/SingleArticle'\nimport { Router } from '@reach/router'\n\nfunction App() {\n  const [user, setUser] = useState('tickle122')\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <div className='innerGrid'>\n        <div className='leftGrid'>\n          <Router>\n            <ArticlesList path='/' />\n            <ArticlesList path='/:topic' />\n          </Router>\n        </div>\n        <div className='rightGrid'>\n          <Router>\n            <TopicButtons path='/' />\n            <TopicButtons path='/:topic' />\n          </Router>\n          <Router>\n            <TopVotedList path='/' />\n            <TopVotedList path='/:topic' />\n          </Router>\n        </div>\n      </div>\n      <Router>\n        <SingleArticle path='/article/:article_id' user={user} />\n      </Router>\n\n    </div>\n  );\n}\n\nexport default App;\n",["50","51"],"/Users/elliotsharpe/Projects/readdit-react-app/src/index.js",[],"/Users/elliotsharpe/Projects/readdit-react-app/src/components/Navbar.jsx",[],"/Users/elliotsharpe/Projects/readdit-react-app/src/components/ArticlesList.jsx",[],"/Users/elliotsharpe/Projects/readdit-react-app/src/api.js",[],"/Users/elliotsharpe/Projects/readdit-react-app/src/components/TopVotedList.jsx",[],"/Users/elliotsharpe/Projects/readdit-react-app/src/components/TopicButtons.jsx",[],"/Users/elliotsharpe/Projects/readdit-react-app/src/components/SingleArticle.jsx",["52","53","54"],"import React, { useEffect, useState } from 'react';\nimport styles from '../styles/SingleArticle.module.scss'\nimport { getSingleArticle, getComments, postComment, deleteComment } from '../api'\nimport CommentsSection from './CommentsSection'\n\nconst SingleArticle = ({ article_id, user }) => {\n    const [article, setArticle] = useState({})\n    const [loading, setLoading] = useState(true)\n\n\n    const { title, body, topic, author, created_at } = article;\n\n    useEffect(() => {\n        const loadContent = async () => {\n            const article = await getSingleArticle(article_id);\n            const comments = await getComments(article_id);\n            setArticle(article)\n            setLoading(false)\n        }\n\n        loadContent()\n    }, [article_id])\n\n    if (loading) return (\n        <div><p>Loading...</p></div>\n    )\n    else return (\n        <div className={styles.container}>\n            <div className={styles.article}>\n                <h3>{title}</h3>\n                <p>{body}</p>\n                <p>{topic}</p>\n                <p>{author}</p>\n                <p>{new Date(created_at).toDateString()}</p>\n                <CommentsSection article_id={article_id} user={user} />\n            </div>\n        </div>\n    );\n};\n\nexport default SingleArticle;","/Users/elliotsharpe/Projects/readdit-react-app/src/components/AddComment.jsx",[],"/Users/elliotsharpe/Projects/readdit-react-app/src/components/CommentsSection.jsx",["55"],"/Users/elliotsharpe/Projects/readdit-react-app/src/components/Voter.jsx",[],{"ruleId":"56","severity":1,"message":"57","line":11,"column":16,"nodeType":"58","messageId":"59","endLine":11,"endColumn":23},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"56","severity":1,"message":"64","line":3,"column":41,"nodeType":"58","messageId":"59","endLine":3,"endColumn":52},{"ruleId":"56","severity":1,"message":"65","line":3,"column":54,"nodeType":"58","messageId":"59","endLine":3,"endColumn":67},{"ruleId":"56","severity":1,"message":"66","line":16,"column":19,"nodeType":"58","messageId":"59","endLine":16,"endColumn":27},{"ruleId":"56","severity":1,"message":"67","line":9,"column":12,"nodeType":"58","messageId":"59","endLine":9,"endColumn":19},"no-unused-vars","'setUser' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["68"],"no-negated-in-lhs",["69"],"'postComment' is defined but never used.","'deleteComment' is defined but never used.","'comments' is assigned a value but never used.","'loading' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]
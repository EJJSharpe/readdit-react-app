[{"/Users/elliotsharpe/Projects/readdit-react-app/src/App.js":"1","/Users/elliotsharpe/Projects/readdit-react-app/src/index.js":"2","/Users/elliotsharpe/Projects/readdit-react-app/src/components/Navbar.jsx":"3","/Users/elliotsharpe/Projects/readdit-react-app/src/components/ArticlesList.jsx":"4","/Users/elliotsharpe/Projects/readdit-react-app/src/api.js":"5","/Users/elliotsharpe/Projects/readdit-react-app/src/components/TopVotedList.jsx":"6","/Users/elliotsharpe/Projects/readdit-react-app/src/components/TopicButtons.jsx":"7","/Users/elliotsharpe/Projects/readdit-react-app/src/components/SingleArticle.jsx":"8","/Users/elliotsharpe/Projects/readdit-react-app/src/components/AddComment.jsx":"9","/Users/elliotsharpe/Projects/readdit-react-app/src/components/CommentsSection.jsx":"10","/Users/elliotsharpe/Projects/readdit-react-app/src/components/Voter.jsx":"11","/Users/elliotsharpe/Projects/readdit-react-app/src/components/Loading.jsx":"12"},{"size":1132,"mtime":1611158537556,"results":"13","hashOfConfig":"14"},{"size":152,"mtime":1609614889011,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1611144607685,"results":"16","hashOfConfig":"14"},{"size":2724,"mtime":1611233046711,"results":"17","hashOfConfig":"14"},{"size":1688,"mtime":1611231628805,"results":"18","hashOfConfig":"14"},{"size":1138,"mtime":1611233486269,"results":"19","hashOfConfig":"14"},{"size":1198,"mtime":1611157908081,"results":"20","hashOfConfig":"14"},{"size":1363,"mtime":1611167715993,"results":"21","hashOfConfig":"14"},{"size":1066,"mtime":1611145938048,"results":"22","hashOfConfig":"14"},{"size":1845,"mtime":1611224469796,"results":"23","hashOfConfig":"14"},{"size":1376,"mtime":1611163525452,"results":"24","hashOfConfig":"14"},{"size":271,"mtime":1611231054223,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},"17ciqti",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"43"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/elliotsharpe/Projects/readdit-react-app/src/App.js",["56"],"import React, { useState } from 'react'\nimport Navbar from './components/Navbar'\nimport ArticlesList from './components/ArticlesList'\nimport './styles/index.scss'\nimport TopVotedList from './components/TopVotedList'\nimport TopicButtons from './components/TopicButtons'\nimport SingleArticle from './components/SingleArticle'\nimport { Router } from '@reach/router'\n\nfunction App() {\n  const [user, setUser] = useState('tickle122')\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <div className='innerGrid'>\n        <div className='leftGrid'>\n          <Router>\n            <ArticlesList path='/' />\n            <ArticlesList path='/:topic' />\n          </Router>\n        </div>\n        <div className='rightGrid'>\n          <Router>\n            <TopicButtons path='/' />\n            <TopicButtons path='/:topic' />\n          </Router>\n          <Router>\n            <TopVotedList path='/' />\n            <TopVotedList path='/:topic' />\n          </Router>\n        </div>\n      </div>\n      <Router>\n        <SingleArticle path='/article/:article_id' user={user} />\n      </Router>\n\n    </div>\n  );\n}\n\nexport default App;\n",["57","58"],"/Users/elliotsharpe/Projects/readdit-react-app/src/index.js",[],["59","60"],"/Users/elliotsharpe/Projects/readdit-react-app/src/components/Navbar.jsx",[],"/Users/elliotsharpe/Projects/readdit-react-app/src/components/ArticlesList.jsx",[],"/Users/elliotsharpe/Projects/readdit-react-app/src/api.js",[],"/Users/elliotsharpe/Projects/readdit-react-app/src/components/TopVotedList.jsx",[],"/Users/elliotsharpe/Projects/readdit-react-app/src/components/TopicButtons.jsx",[],["61","62"],"/Users/elliotsharpe/Projects/readdit-react-app/src/components/SingleArticle.jsx",["63","64","65"],"import React, { useEffect, useState } from 'react';\nimport styles from '../styles/SingleArticle.module.scss'\nimport { getSingleArticle, getComments, postComment, deleteComment } from '../api'\nimport CommentsSection from './CommentsSection'\n\nconst SingleArticle = ({ article_id, user }) => {\n    const [article, setArticle] = useState({})\n    const [loading, setLoading] = useState(true)\n\n\n    const { title, body, topic, author, created_at } = article;\n\n    useEffect(() => {\n        const loadContent = async () => {\n            const article = await getSingleArticle(article_id);\n            const comments = await getComments(article_id);\n            setArticle(article)\n            setLoading(false)\n        }\n\n        loadContent()\n    }, [article_id])\n\n    if (loading) return (\n        <div><p>Loading...</p></div>\n    )\n    else return (\n        <div className={styles.container}>\n            <div className={styles.article}>\n                <div className={styles.articleText}>\n                    <h3>{title}</h3>\n                    <p>{body}</p>\n                    <p>{topic}</p>\n                    <p>{author}</p>\n                    <p>{new Date(created_at).toDateString()}</p>\n                </div>\n                <CommentsSection article_id={article_id} user={user} />\n            </div>\n        </div>\n    );\n};\n\nexport default SingleArticle;","/Users/elliotsharpe/Projects/readdit-react-app/src/components/AddComment.jsx",[],"/Users/elliotsharpe/Projects/readdit-react-app/src/components/CommentsSection.jsx",["66"],"import React, { useEffect, useState } from 'react';\nimport styles from '../styles/CommentsSection.module.scss'\nimport Voter from './Voter'\nimport AddComment from './AddComment'\nimport { getComments, deleteComment } from '../api'\n\nconst CommentsSection = ({ article_id, user }) => {\n    const [comments, setComments] = useState([])\n    const [loading, setLoading] = useState(true)\n\n    useEffect(() => {\n        const loadContent = async () => {\n            setComments(await getComments(article_id))\n            setLoading(false)\n        }\n\n        loadContent()\n    }, [article_id])\n\n    const handleDeleteComment = async (id) => {\n        const commentsCopy = [...comments]\n        const newComments = commentsCopy.filter(comment => {\n            return comment.comment_id !== id\n        })\n\n        deleteComment(id)\n        setComments(newComments)\n    }\n\n    return (\n        <div className={styles.commentsSection}>\n            <AddComment user={user} article_id={article_id} comments={comments} setComments={setComments} />\n            {comments.map(comment => {\n                const { comment_id, author, body, created_at, votes } = comment;\n                return (\n                    <div key={comment_id} className={styles.singleComment}>\n                        <p className={styles.body}>{body}</p>\n                        <p className={styles.author}>{author}</p>\n                        <Voter votes={votes} comment_id={comment_id} />\n                        <p className={styles.date}>{new Date(created_at).toDateString()}</p>\n                        {author === user ? <button className={styles.deleteButton} onClick={() => { handleDeleteComment(comment_id) }}><i class='bx bx-trash'></i></button> : null}\n                    </div>\n\n                )\n            })}\n        </div >\n    );\n};\n\nexport default CommentsSection;","/Users/elliotsharpe/Projects/readdit-react-app/src/components/Voter.jsx",[],"/Users/elliotsharpe/Projects/readdit-react-app/src/components/Loading.jsx",[],{"ruleId":"67","severity":1,"message":"68","line":11,"column":16,"nodeType":"69","messageId":"70","endLine":11,"endColumn":23},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"71","replacedBy":"75"},{"ruleId":"73","replacedBy":"76"},{"ruleId":"71","replacedBy":"77"},{"ruleId":"73","replacedBy":"78"},{"ruleId":"67","severity":1,"message":"79","line":3,"column":41,"nodeType":"69","messageId":"70","endLine":3,"endColumn":52},{"ruleId":"67","severity":1,"message":"80","line":3,"column":54,"nodeType":"69","messageId":"70","endLine":3,"endColumn":67},{"ruleId":"67","severity":1,"message":"81","line":16,"column":19,"nodeType":"69","messageId":"70","endLine":16,"endColumn":27},{"ruleId":"67","severity":1,"message":"82","line":9,"column":12,"nodeType":"69","messageId":"70","endLine":9,"endColumn":19},"no-unused-vars","'setUser' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["83"],"no-negated-in-lhs",["84"],["83"],["84"],["83"],["84"],"'postComment' is defined but never used.","'deleteComment' is defined but never used.","'comments' is assigned a value but never used.","'loading' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]